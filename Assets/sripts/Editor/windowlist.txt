5.) 5 smash blocks toturial
6.) Make new arrow moving system
8.) player manual should also give feedback
9.) in toturial scene player show know that he has to kill the dummy viper
11.) When a message is displayed the background should Fade
12.) in game scene counting should stop when pressed the pause menu
1.) Fade animation in every scene switch   [v]
2.) give feedback on every button pressed   [v]
4.) Add section to buy other bullets in store scene   [v]
5.) recreate the toturial   [v]
6.) The health bar should flash when health is low      [v]
8.) player manual should also give feedback   [v]
12.) in game scene counting should stop when pressed the pause menu
15.) 5 smash blocks toturial  [v]
16.) Make new arrow moving system   [v]
18.) audio should be better in the game




 /*Dictionary<string,bool> Dict = new Dictionary<string,bool>();
        l.jsonDict = new Dictionary<string,bool>();
        l.jsonDict.Add("sdfs",false);
       
        if(GUILayout.Button("Test"))
        {
            
            
            l.jsonDict.Add("aaa",false);
            l.jsonDict.Add("sss",false);
            foreach (KeyValuePair<string,bool> name in Dict)
            {
                Debug.Log(name.Key);
            }
            string str = JsonUtility.ToJson(l);
            Debug.Log(str);
            File.WriteAllText(Application.dataPath + "editorfile.json", str);
        }*/
        



        // for make the json of the notes
        /*string listJso = File.ReadAllText(Application.dataPath + "editorfile.json");
        Debug.Log("string" + listJso);
        // JsonUtility.FromJson<liststruct>(listJso);
        liststruct listJson = JsonUtility.FromJson<liststruct>(listJso);
        Debug.Log("object "+ listJson);

        if(GUILayout.Button("Create New checkLine"))
        {
            listJson.jsonDict.Add(textFieldText,false);
            string jsonString = JsonUtility.ToJson(listJson);
            Debug.Log(jsonString);
            File.WriteAllText(Application.dataPath + "editorfile.json", jsonString);
        }

        GUILayout.Label("",EditorStyles.boldLabel);
        GUILayout.Label("This Are The Text",EditorStyles.boldLabel);

        foreach(KeyValuePair<string,bool> entry in listJson.jsonDict)
        {
            string note = entry.Key;
            bool ischeck = entry.Value;
            Debug.Log(note+"  "+ ischeck);
            EditorGUILayout.Toggle(note,ischeck);
        }*/
        
        /*for (int i = 0; i < list12.mainList.Count; i++)
        {
            
            if(!ischeck)
            {
                list12.boolList[i] = ischeck;
            }

            
        }*/

        /*foreach (string item in list12.mainList)
        {

            foreach (bool check in list12.boolList)
            {
                check = EditorGUILayout.Toggle(item,check);
            }

            // string UpperString = item.ToUpper();
            /*char previews = ;
            foreach(char c in item)
            {
                if(char.IsLetter(previews) || previews == null)
                {
                    char.ToUpper(c);
                }
                previews = c;
            }
            foreach (bool check in list12.boolList)
            {
                check = EditorGUILayout.Toggle(item,check);
            }
            
        }*/
        